"""Implementation of statechart alarm_statechart.
Generated by YAKINDU Statechart Tools code generator.
"""

import queue

class AlarmStatechart:
	"""Implementation of the state machine AlarmStatechart.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_on,
			main_region_on_car_state_car_state,
			main_region_on_car_state_car_state_audio_stop,
			main_region_on_car_state_car_state_audio_pause,
			main_region_on_car_state_car_state_audio_on,
			main_region_on_car_state_car_state_movment_car_is_standing,
			main_region_on_car_state_car_state_movment_car_is_moving,
			main_region_on_car_state_car_state_signal_lever_on,
			main_region_on_car_state_car_state_signal_lever_off,
			main_region_on_display_display_off,
			main_region_on_display_deviation_from_lane,
			main_region_on_display_car_collision,
			main_region_on_display_not_kepping_distance,
			main_region_on_display_pedestian_collision,
			main_region_on_alarm_sound_on,
			main_region_on_alarm_sound_off,
			main_region_on_camera_camera_caught,
			main_region_on_camera_camera_runing,
			main_region_off,
			null_state
		) = range(20)


	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc.
		"""

		self.road_speed = None
		self.speed = None
		self.distance_from_car = None
		self.element = None
		self.car_standing = None
		self.signal_level_state = None
		self.system_state = None
		self.music_state = None
		self.starting_the_engine = None
		self.turning_off_the_engine = None
		self.toggle_audio = None
		self.stop_audio = None
		self.swipe_lever = None
		self.car_moved = None
		self.car_standing = None
		self.alarm_on = None
		self.alarm_off = None
		self.run_audio = None
		self.camera_caught_event = None
		self.camera_clean = None
		self.show_d = None
		self.show_p = None
		self.show_c = None
		self.show_n = None
		self.show_off = None
		self.operation_callback = None

		self.in_event_queue = queue.Queue()
		# enumeration of all states:
		self.__State = AlarmStatechart.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 6
		for __state_index in range(6):
			self.__state_vector[__state_index] = self.State.null_state

		# initializations:
		self.road_speed = 0
		self.speed = 0
		self.distance_from_car = 56
		self.element = "Nothing"
		self.car_standing = ""
		self.signal_level_state = ""
		self.system_state = ""
		self.music_state = ""
		self.__is_executing = False
		self.__state_conf_vector_position = None

	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state or self.__state_vector[1] is not self.__State.null_state or self.__state_vector[2] is not self.__State.null_state or self.__state_vector[3] is not self.__State.null_state or self.__state_vector[4] is not self.__State.null_state or self.__state_vector[5] is not self.__State.null_state

	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False

	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_on:
			return (self.__state_vector[0] >= self.__State.main_region_on)\
				and (self.__state_vector[0] <= self.__State.main_region_on_camera_camera_runing)
		if s == self.__State.main_region_on_car_state_car_state:
			return (self.__state_vector[0] >= self.__State.main_region_on_car_state_car_state)\
				and (self.__state_vector[0] <= self.__State.main_region_on_car_state_car_state_signal_lever_off)
		if s == self.__State.main_region_on_car_state_car_state_audio_stop:
			return self.__state_vector[0] == self.__State.main_region_on_car_state_car_state_audio_stop
		if s == self.__State.main_region_on_car_state_car_state_audio_pause:
			return self.__state_vector[0] == self.__State.main_region_on_car_state_car_state_audio_pause
		if s == self.__State.main_region_on_car_state_car_state_audio_on:
			return self.__state_vector[0] == self.__State.main_region_on_car_state_car_state_audio_on
		if s == self.__State.main_region_on_car_state_car_state_movment_car_is_standing:
			return self.__state_vector[1] == self.__State.main_region_on_car_state_car_state_movment_car_is_standing
		if s == self.__State.main_region_on_car_state_car_state_movment_car_is_moving:
			return self.__state_vector[1] == self.__State.main_region_on_car_state_car_state_movment_car_is_moving
		if s == self.__State.main_region_on_car_state_car_state_signal_lever_on:
			return self.__state_vector[2] == self.__State.main_region_on_car_state_car_state_signal_lever_on
		if s == self.__State.main_region_on_car_state_car_state_signal_lever_off:
			return self.__state_vector[2] == self.__State.main_region_on_car_state_car_state_signal_lever_off
		if s == self.__State.main_region_on_display_display_off:
			return self.__state_vector[3] == self.__State.main_region_on_display_display_off
		if s == self.__State.main_region_on_display_deviation_from_lane:
			return self.__state_vector[3] == self.__State.main_region_on_display_deviation_from_lane
		if s == self.__State.main_region_on_display_car_collision:
			return self.__state_vector[3] == self.__State.main_region_on_display_car_collision
		if s == self.__State.main_region_on_display_not_kepping_distance:
			return self.__state_vector[3] == self.__State.main_region_on_display_not_kepping_distance
		if s == self.__State.main_region_on_display_pedestian_collision:
			return self.__state_vector[3] == self.__State.main_region_on_display_pedestian_collision
		if s == self.__State.main_region_on_alarm_sound_on:
			return self.__state_vector[4] == self.__State.main_region_on_alarm_sound_on
		if s == self.__State.main_region_on_alarm_sound_off:
			return self.__state_vector[4] == self.__State.main_region_on_alarm_sound_off
		if s == self.__State.main_region_on_camera_camera_caught:
			return self.__state_vector[5] == self.__State.main_region_on_camera_camera_caught
		if s == self.__State.main_region_on_camera_camera_runing:
			return self.__state_vector[5] == self.__State.main_region_on_camera_camera_runing
		if s == self.__State.main_region_off:
			return self.__state_vector[0] == self.__State.main_region_off
		return False

	def __execute_queued_event(self, func):
		func()

	def __get_next_event(self):
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None

	def raise_starting_the_engine(self):
		"""Raise method for event starting_the_engine.
		"""
		self.in_event_queue.put(self.__raise_starting_the_engine_call)
		self.run_cycle()

	def __raise_starting_the_engine_call(self):
		"""Raise callback for event starting_the_engine.
		"""
		self.starting_the_engine = True

	def raise_turning_off_the_engine(self):
		"""Raise method for event turning_off_the_engine.
		"""
		self.in_event_queue.put(self.__raise_turning_off_the_engine_call)
		self.run_cycle()

	def __raise_turning_off_the_engine_call(self):
		"""Raise callback for event turning_off_the_engine.
		"""
		self.turning_off_the_engine = True

	def raise_toggle_audio(self):
		"""Raise method for event toggle_audio.
		"""
		self.in_event_queue.put(self.__raise_toggle_audio_call)
		self.run_cycle()

	def __raise_toggle_audio_call(self):
		"""Raise callback for event toggle_audio.
		"""
		self.toggle_audio = True

	def raise_stop_audio(self):
		"""Raise method for event stop_audio.
		"""
		self.in_event_queue.put(self.__raise_stop_audio_call)
		self.run_cycle()

	def __raise_stop_audio_call(self):
		"""Raise callback for event stop_audio.
		"""
		self.stop_audio = True

	def raise_swipe_lever(self):
		"""Raise method for event swipe_lever.
		"""
		self.in_event_queue.put(self.__raise_swipe_lever_call)
		self.run_cycle()

	def __raise_swipe_lever_call(self):
		"""Raise callback for event swipe_lever.
		"""
		self.swipe_lever = True

	def raise_car_moved(self):
		"""Raise method for event car_moved.
		"""
		self.in_event_queue.put(self.__raise_car_moved_call)
		self.run_cycle()

	def __raise_car_moved_call(self):
		"""Raise callback for event car_moved.
		"""
		self.car_moved = True

	def raise_car_standing(self):
		"""Raise method for event car_standing.
		"""
		self.in_event_queue.put(self.__raise_car_standing_call)
		self.run_cycle()

	def __raise_car_standing_call(self):
		"""Raise callback for event car_standing.
		"""
		self.car_standing = True

	def raise_alarm_on(self):
		"""Raise method for event alarm_on.
		"""
		self.in_event_queue.put(self.__raise_alarm_on_call)
		self.run_cycle()

	def __raise_alarm_on_call(self):
		"""Raise callback for event alarm_on.
		"""
		self.alarm_on = True

	def raise_alarm_off(self):
		"""Raise method for event alarm_off.
		"""
		self.in_event_queue.put(self.__raise_alarm_off_call)
		self.run_cycle()

	def __raise_alarm_off_call(self):
		"""Raise callback for event alarm_off.
		"""
		self.alarm_off = True

	def raise_run_audio(self):
		"""Raise method for event run_audio.
		"""
		self.in_event_queue.put(self.__raise_run_audio_call)
		self.run_cycle()

	def __raise_run_audio_call(self):
		"""Raise callback for event run_audio.
		"""
		self.run_audio = True

	def raise_camera_caught_event(self):
		"""Raise method for event camera_caught_event.
		"""
		self.in_event_queue.put(self.__raise_camera_caught_event_call)
		self.run_cycle()

	def __raise_camera_caught_event_call(self):
		"""Raise callback for event camera_caught_event.
		"""
		self.camera_caught_event = True

	def raise_camera_clean(self):
		"""Raise method for event camera_clean.
		"""
		self.in_event_queue.put(self.__raise_camera_clean_call)
		self.run_cycle()

	def __raise_camera_clean_call(self):
		"""Raise callback for event camera_clean.
		"""
		self.camera_clean = True

	def raise_show_d(self):
		"""Raise method for event show_d.
		"""
		self.in_event_queue.put(self.__raise_show_d_call)
		self.run_cycle()

	def __raise_show_d_call(self):
		"""Raise callback for event show_d.
		"""
		self.show_d = True

	def raise_show_p(self):
		"""Raise method for event show_p.
		"""
		self.in_event_queue.put(self.__raise_show_p_call)
		self.run_cycle()

	def __raise_show_p_call(self):
		"""Raise callback for event show_p.
		"""
		self.show_p = True

	def raise_show_c(self):
		"""Raise method for event show_c.
		"""
		self.in_event_queue.put(self.__raise_show_c_call)
		self.run_cycle()

	def __raise_show_c_call(self):
		"""Raise callback for event show_c.
		"""
		self.show_c = True

	def raise_show_n(self):
		"""Raise method for event show_n.
		"""
		self.in_event_queue.put(self.__raise_show_n_call)
		self.run_cycle()

	def __raise_show_n_call(self):
		"""Raise callback for event show_n.
		"""
		self.show_n = True

	def raise_show_off(self):
		"""Raise method for event show_off.
		"""
		self.in_event_queue.put(self.__raise_show_off_call)
		self.run_cycle()

	def __raise_show_off_call(self):
		"""Raise callback for event show_off.
		"""
		self.show_off = True

	def __entry_action_main_region_on(self):
		"""Entry action for state 'On'..
		"""
		self.system_state = "On"

	def __entry_action_main_region_on_car_state_car_state_audio_pause(self):
		"""Entry action for state 'Pause'..
		"""
		self.music_state = "Paused"

	def __entry_action_main_region_on_car_state_car_state_audio_on(self):
		"""Entry action for state 'On'..
		"""
		self.music_state = "On"

	def __entry_action_main_region_on_car_state_car_state_movment_car_is_standing(self):
		"""Entry action for state 'CarIsStanding'..
		"""
		self.car_standing = "Standing"

	def __entry_action_main_region_on_car_state_car_state_movment_car_is_moving(self):
		"""Entry action for state 'carIsMoving'..
		"""
		self.car_standing = "Moving"

	def __entry_action_main_region_on_car_state_car_state_signal_lever_on(self):
		"""Entry action for state 'On'..
		"""
		self.signal_level_state = "On"

	def __entry_action_main_region_on_car_state_car_state_signal_lever_off(self):
		"""Entry action for state 'Off'..
		"""
		self.signal_level_state = "Off"

	def __entry_action_main_region_off(self):
		"""Entry action for state 'Off'..
		"""
		self.system_state = "Off"
		self.speed = 0
		self.music_state = "Paused"

	def __enter_sequence_main_region_on_default(self):
		"""'default' enter sequence for state On.
		"""
		self.__entry_action_main_region_on()
		self.__enter_sequence_main_region_on_car_state_default()
		self.__enter_sequence_main_region_on_display_default()
		self.__enter_sequence_main_region_on_alarm_default()
		self.__enter_sequence_main_region_on_camera_default()

	def __enter_sequence_main_region_on_car_state_car_state_audio_stop_default(self):
		"""'default' enter sequence for state Stop.
		"""
		self.__state_vector[0] = self.State.main_region_on_car_state_car_state_audio_stop
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_audio_pause_default(self):
		"""'default' enter sequence for state Pause.
		"""
		self.__entry_action_main_region_on_car_state_car_state_audio_pause()
		self.__state_vector[0] = self.State.main_region_on_car_state_car_state_audio_pause
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_audio_on_default(self):
		"""'default' enter sequence for state On.
		"""
		self.__entry_action_main_region_on_car_state_car_state_audio_on()
		self.__state_vector[0] = self.State.main_region_on_car_state_car_state_audio_on
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_movment_car_is_standing_default(self):
		"""'default' enter sequence for state CarIsStanding.
		"""
		self.__entry_action_main_region_on_car_state_car_state_movment_car_is_standing()
		self.__state_vector[1] = self.State.main_region_on_car_state_car_state_movment_car_is_standing
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_movment_car_is_moving_default(self):
		"""'default' enter sequence for state carIsMoving.
		"""
		self.__entry_action_main_region_on_car_state_car_state_movment_car_is_moving()
		self.__state_vector[1] = self.State.main_region_on_car_state_car_state_movment_car_is_moving
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_signal_lever_on_default(self):
		"""'default' enter sequence for state On.
		"""
		self.__entry_action_main_region_on_car_state_car_state_signal_lever_on()
		self.__state_vector[2] = self.State.main_region_on_car_state_car_state_signal_lever_on
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_signal_lever_off_default(self):
		"""'default' enter sequence for state Off.
		"""
		self.__entry_action_main_region_on_car_state_car_state_signal_lever_off()
		self.__state_vector[2] = self.State.main_region_on_car_state_car_state_signal_lever_off
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_display_display_off_default(self):
		"""'default' enter sequence for state DisplayOff.
		"""
		self.__state_vector[3] = self.State.main_region_on_display_display_off
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_display_deviation_from_lane_default(self):
		"""'default' enter sequence for state DeviationFromLane.
		"""
		self.__state_vector[3] = self.State.main_region_on_display_deviation_from_lane
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_display_car_collision_default(self):
		"""'default' enter sequence for state CarCollision.
		"""
		self.__state_vector[3] = self.State.main_region_on_display_car_collision
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_display_not_kepping_distance_default(self):
		"""'default' enter sequence for state NotKeppingDistance.
		"""
		self.__state_vector[3] = self.State.main_region_on_display_not_kepping_distance
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_display_pedestian_collision_default(self):
		"""'default' enter sequence for state PedestianCollision.
		"""
		self.__state_vector[3] = self.State.main_region_on_display_pedestian_collision
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_alarm_sound_on_default(self):
		"""'default' enter sequence for state SoundOn.
		"""
		self.__state_vector[4] = self.State.main_region_on_alarm_sound_on
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_alarm_sound_off_default(self):
		"""'default' enter sequence for state SoundOff.
		"""
		self.__state_vector[4] = self.State.main_region_on_alarm_sound_off
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_camera_camera_caught_default(self):
		"""'default' enter sequence for state CameraCaught.
		"""
		self.__state_vector[5] = self.State.main_region_on_camera_camera_caught
		self.__state_conf_vector_position = 5
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_camera_camera_runing_default(self):
		"""'default' enter sequence for state CameraRuning.
		"""
		self.__state_vector[5] = self.State.main_region_on_camera_camera_runing
		self.__state_conf_vector_position = 5
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_off_default(self):
		"""'default' enter sequence for state Off.
		"""
		self.__entry_action_main_region_off()
		self.__state_vector[0] = self.State.main_region_off
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main_region.
		"""
		self.__react_main_region__entry_default()

	def __enter_sequence_main_region_on_car_state_default(self):
		"""'default' enter sequence for region carState.
		"""
		self.__react_main_region_on_car_state__entry_default()

	def __enter_sequence_main_region_on_car_state_car_state_audio_default(self):
		"""'default' enter sequence for region Audio.
		"""
		self.__react_main_region_on_car_state_car_state_audio__entry_default()

	def __enter_sequence_main_region_on_car_state_car_state_signal_lever_default(self):
		"""'default' enter sequence for region SignalLever.
		"""
		self.__react_main_region_on_car_state_car_state_signal_lever__entry_default()

	def __enter_sequence_main_region_on_display_default(self):
		"""'default' enter sequence for region Display.
		"""
		self.__react_main_region_on_display__entry_default()

	def __enter_sequence_main_region_on_alarm_default(self):
		"""'default' enter sequence for region Alarm.
		"""
		self.__react_main_region_on_alarm__entry_default()

	def __enter_sequence_main_region_on_camera_default(self):
		"""'default' enter sequence for region camera.
		"""
		self.__react_main_region_on_camera__entry_default()

	def __exit_sequence_main_region_on(self):
		"""Default exit sequence for state On.
		"""
		self.__exit_sequence_main_region_on_car_state()
		self.__exit_sequence_main_region_on_display()
		self.__exit_sequence_main_region_on_alarm()
		self.__exit_sequence_main_region_on_camera()

	def __exit_sequence_main_region_on_car_state_car_state_audio_stop(self):
		"""Default exit sequence for state Stop.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0

	def __exit_sequence_main_region_on_car_state_car_state_audio_pause(self):
		"""Default exit sequence for state Pause.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0

	def __exit_sequence_main_region_on_car_state_car_state_audio_on(self):
		"""Default exit sequence for state On.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0

	def __exit_sequence_main_region_on_car_state_car_state_movment_car_is_standing(self):
		"""Default exit sequence for state CarIsStanding.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1

	def __exit_sequence_main_region_on_car_state_car_state_movment_car_is_moving(self):
		"""Default exit sequence for state carIsMoving.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1

	def __exit_sequence_main_region_on_car_state_car_state_signal_lever_on(self):
		"""Default exit sequence for state On.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2

	def __exit_sequence_main_region_on_car_state_car_state_signal_lever_off(self):
		"""Default exit sequence for state Off.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2

	def __exit_sequence_main_region_on_display_display_off(self):
		"""Default exit sequence for state DisplayOff.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3

	def __exit_sequence_main_region_on_display_deviation_from_lane(self):
		"""Default exit sequence for state DeviationFromLane.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3

	def __exit_sequence_main_region_on_display_car_collision(self):
		"""Default exit sequence for state CarCollision.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3

	def __exit_sequence_main_region_on_display_not_kepping_distance(self):
		"""Default exit sequence for state NotKeppingDistance.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3

	def __exit_sequence_main_region_on_display_pedestian_collision(self):
		"""Default exit sequence for state PedestianCollision.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3

	def __exit_sequence_main_region_on_alarm_sound_on(self):
		"""Default exit sequence for state SoundOn.
		"""
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4

	def __exit_sequence_main_region_on_alarm_sound_off(self):
		"""Default exit sequence for state SoundOff.
		"""
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4

	def __exit_sequence_main_region_on_camera_camera_caught(self):
		"""Default exit sequence for state CameraCaught.
		"""
		self.__state_vector[5] = self.State.null_state
		self.__state_conf_vector_position = 5

	def __exit_sequence_main_region_on_camera_camera_runing(self):
		"""Default exit sequence for state CameraRuning.
		"""
		self.__state_vector[5] = self.State.null_state
		self.__state_conf_vector_position = 5

	def __exit_sequence_main_region_off(self):
		"""Default exit sequence for state Off.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0

	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main_region.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_on_car_state_car_state_audio_stop:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_stop()
		elif state == self.State.main_region_on_car_state_car_state_audio_pause:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_pause()
		elif state == self.State.main_region_on_car_state_car_state_audio_on:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_on()
		elif state == self.State.main_region_off:
			self.__exit_sequence_main_region_off()
		state = self.__state_vector[1]
		if state == self.State.main_region_on_car_state_car_state_movment_car_is_standing:
			self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_standing()
		elif state == self.State.main_region_on_car_state_car_state_movment_car_is_moving:
			self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_moving()
		state = self.__state_vector[2]
		if state == self.State.main_region_on_car_state_car_state_signal_lever_on:
			self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_on()
		elif state == self.State.main_region_on_car_state_car_state_signal_lever_off:
			self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_off()
		state = self.__state_vector[3]
		if state == self.State.main_region_on_display_display_off:
			self.__exit_sequence_main_region_on_display_display_off()
		elif state == self.State.main_region_on_display_deviation_from_lane:
			self.__exit_sequence_main_region_on_display_deviation_from_lane()
		elif state == self.State.main_region_on_display_car_collision:
			self.__exit_sequence_main_region_on_display_car_collision()
		elif state == self.State.main_region_on_display_not_kepping_distance:
			self.__exit_sequence_main_region_on_display_not_kepping_distance()
		elif state == self.State.main_region_on_display_pedestian_collision:
			self.__exit_sequence_main_region_on_display_pedestian_collision()
		state = self.__state_vector[4]
		if state == self.State.main_region_on_alarm_sound_on:
			self.__exit_sequence_main_region_on_alarm_sound_on()
		elif state == self.State.main_region_on_alarm_sound_off:
			self.__exit_sequence_main_region_on_alarm_sound_off()
		state = self.__state_vector[5]
		if state == self.State.main_region_on_camera_camera_caught:
			self.__exit_sequence_main_region_on_camera_camera_caught()
		elif state == self.State.main_region_on_camera_camera_runing:
			self.__exit_sequence_main_region_on_camera_camera_runing()

	def __exit_sequence_main_region_on_car_state(self):
		"""Default exit sequence for region carState.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_on_car_state_car_state_audio_stop:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_stop()
		elif state == self.State.main_region_on_car_state_car_state_audio_pause:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_pause()
		elif state == self.State.main_region_on_car_state_car_state_audio_on:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_on()
		state = self.__state_vector[1]
		if state == self.State.main_region_on_car_state_car_state_movment_car_is_standing:
			self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_standing()
		elif state == self.State.main_region_on_car_state_car_state_movment_car_is_moving:
			self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_moving()
		state = self.__state_vector[2]
		if state == self.State.main_region_on_car_state_car_state_signal_lever_on:
			self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_on()
		elif state == self.State.main_region_on_car_state_car_state_signal_lever_off:
			self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_off()

	def __exit_sequence_main_region_on_display(self):
		"""Default exit sequence for region Display.
		"""
		state = self.__state_vector[3]
		if state == self.State.main_region_on_display_display_off:
			self.__exit_sequence_main_region_on_display_display_off()
		elif state == self.State.main_region_on_display_deviation_from_lane:
			self.__exit_sequence_main_region_on_display_deviation_from_lane()
		elif state == self.State.main_region_on_display_car_collision:
			self.__exit_sequence_main_region_on_display_car_collision()
		elif state == self.State.main_region_on_display_not_kepping_distance:
			self.__exit_sequence_main_region_on_display_not_kepping_distance()
		elif state == self.State.main_region_on_display_pedestian_collision:
			self.__exit_sequence_main_region_on_display_pedestian_collision()

	def __exit_sequence_main_region_on_alarm(self):
		"""Default exit sequence for region Alarm.
		"""
		state = self.__state_vector[4]
		if state == self.State.main_region_on_alarm_sound_on:
			self.__exit_sequence_main_region_on_alarm_sound_on()
		elif state == self.State.main_region_on_alarm_sound_off:
			self.__exit_sequence_main_region_on_alarm_sound_off()

	def __exit_sequence_main_region_on_camera(self):
		"""Default exit sequence for region camera.
		"""
		state = self.__state_vector[5]
		if state == self.State.main_region_on_camera_camera_caught:
			self.__exit_sequence_main_region_on_camera_camera_caught()
		elif state == self.State.main_region_on_camera_camera_runing:
			self.__exit_sequence_main_region_on_camera_camera_runing()

	def __react_main_region_on_car_state_car_state_audio__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_car_state_car_state_audio_on_default()

	def __react_main_region_on_car_state_car_state_signal_lever__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_car_state_car_state_signal_lever_off_default()

	def __react_main_region_on_car_state__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_car_state_car_state_audio_default()
		self.__enter_sequence_main_region_on_car_state_car_state_movment_car_is_standing_default()
		self.__enter_sequence_main_region_on_car_state_car_state_signal_lever_default()

	def __react_main_region_on_display__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_display_display_off_default()

	def __react_main_region_on_alarm__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_alarm_sound_off_default()

	def __react_main_region_on_camera__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_camera_camera_runing_default()

	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_off_default()

	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		self.operation_callback.synchronize()
		return transitioned_before


	def __main_region_on_react(self, transitioned_before):
		"""Implementation of __main_region_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.turning_off_the_engine:
				self.__exit_sequence_main_region_on()
				self.__enter_sequence_main_region_off_default()
				self.__react(0)
				transitioned_after = 5
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after


	def __main_region_on_car_state_car_state_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_react function.
		"""
		transitioned_after = transitioned_before
		return transitioned_after


	def __main_region_on_car_state_car_state_audio_stop_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_audio_stop_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if (self.run_audio) and (self.is_state_active(self.State.main_region_on_camera_camera_runing)):
				self.__exit_sequence_main_region_on_car_state_car_state_audio_stop()
				self.__enter_sequence_main_region_on_car_state_car_state_audio_on_default()
				transitioned_after = 0
		return transitioned_after


	def __main_region_on_car_state_car_state_audio_pause_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_audio_pause_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.toggle_audio:
				self.__exit_sequence_main_region_on_car_state_car_state_audio_pause()
				self.__enter_sequence_main_region_on_car_state_car_state_audio_on_default()
				transitioned_after = 0
		return transitioned_after


	def __main_region_on_car_state_car_state_audio_on_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_audio_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.toggle_audio:
				self.__exit_sequence_main_region_on_car_state_car_state_audio_on()
				self.__enter_sequence_main_region_on_car_state_car_state_audio_pause_default()
				transitioned_after = 0
			elif (self.stop_audio) and (self.is_state_active(self.State.main_region_on_alarm_sound_on)):
				self.__exit_sequence_main_region_on_car_state_car_state_audio_on()
				self.__enter_sequence_main_region_on_car_state_car_state_audio_stop_default()
				transitioned_after = 0
		return transitioned_after


	def __main_region_on_car_state_car_state_movment_car_is_standing_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_movment_car_is_standing_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if (self.car_moved) and (self.speed > 0):
				self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_standing()
				self.__enter_sequence_main_region_on_car_state_car_state_movment_car_is_moving_default()
				transitioned_after = 1
		return transitioned_after


	def __main_region_on_car_state_car_state_movment_car_is_moving_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_movment_car_is_moving_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if (self.car_standing) and (self.speed == 0):
				self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_moving()
				self.__enter_sequence_main_region_on_car_state_car_state_movment_car_is_standing_default()
				transitioned_after = 1
		return transitioned_after


	def __main_region_on_car_state_car_state_signal_lever_on_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_signal_lever_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 2:
			if self.swipe_lever:
				self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_on()
				self.__enter_sequence_main_region_on_car_state_car_state_signal_lever_off_default()
				self.__main_region_on_car_state_car_state_react(0)
				transitioned_after = 2
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_car_state_car_state_react(transitioned_before)
		return transitioned_after


	def __main_region_on_car_state_car_state_signal_lever_off_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_signal_lever_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 2:
			if self.swipe_lever:
				self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_off()
				self.__enter_sequence_main_region_on_car_state_car_state_signal_lever_on_default()
				self.__main_region_on_car_state_car_state_react(0)
				transitioned_after = 2
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_car_state_car_state_react(transitioned_before)
		return transitioned_after


	def __main_region_on_display_display_off_react(self, transitioned_before):
		"""Implementation of __main_region_on_display_display_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if (self.show_d) and (self.is_state_active(self.State.main_region_on_camera_camera_caught)):
				self.__exit_sequence_main_region_on_display_display_off()
				self.__enter_sequence_main_region_on_display_deviation_from_lane_default()
				transitioned_after = 3
			elif (self.show_c) and (self.is_state_active(self.State.main_region_on_camera_camera_caught)):
				self.__exit_sequence_main_region_on_display_display_off()
				self.__enter_sequence_main_region_on_display_car_collision_default()
				transitioned_after = 3
			elif (self.show_n) and (self.is_state_active(self.State.main_region_on_camera_camera_caught)):
				self.__exit_sequence_main_region_on_display_display_off()
				self.__enter_sequence_main_region_on_display_not_kepping_distance_default()
				transitioned_after = 3
			elif (self.show_p) and (self.is_state_active(self.State.main_region_on_camera_camera_caught)):
				self.__exit_sequence_main_region_on_display_display_off()
				self.__enter_sequence_main_region_on_display_pedestian_collision_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_on_display_deviation_from_lane_react(self, transitioned_before):
		"""Implementation of __main_region_on_display_deviation_from_lane_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if (self.show_off) and (self.is_state_active(self.State.main_region_on_camera_camera_runing)):
				self.__exit_sequence_main_region_on_display_deviation_from_lane()
				self.__enter_sequence_main_region_on_display_display_off_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_on_display_car_collision_react(self, transitioned_before):
		"""Implementation of __main_region_on_display_car_collision_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if (self.show_off) and (self.is_state_active(self.State.main_region_on_camera_camera_runing)):
				self.__exit_sequence_main_region_on_display_car_collision()
				self.__enter_sequence_main_region_on_display_display_off_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_on_display_not_kepping_distance_react(self, transitioned_before):
		"""Implementation of __main_region_on_display_not_kepping_distance_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if (self.show_off) and (self.is_state_active(self.State.main_region_on_camera_camera_runing) or self.distance_from_car >= 56):
				self.__exit_sequence_main_region_on_display_not_kepping_distance()
				self.__enter_sequence_main_region_on_display_display_off_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_on_display_pedestian_collision_react(self, transitioned_before):
		"""Implementation of __main_region_on_display_pedestian_collision_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if (self.show_off) and (self.is_state_active(self.State.main_region_on_camera_camera_runing)):
				self.__exit_sequence_main_region_on_display_pedestian_collision()
				self.__enter_sequence_main_region_on_display_display_off_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_on_alarm_sound_on_react(self, transitioned_before):
		"""Implementation of __main_region_on_alarm_sound_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 4:
			if (self.alarm_off) and (self.is_state_active(self.State.main_region_on_camera_camera_runing)):
				self.__exit_sequence_main_region_on_alarm_sound_on()
				self.__enter_sequence_main_region_on_alarm_sound_off_default()
				transitioned_after = 4
		return transitioned_after


	def __main_region_on_alarm_sound_off_react(self, transitioned_before):
		"""Implementation of __main_region_on_alarm_sound_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 4:
			if self.alarm_on:
				self.__exit_sequence_main_region_on_alarm_sound_off()
				self.__enter_sequence_main_region_on_alarm_sound_on_default()
				transitioned_after = 4
		return transitioned_after


	def __main_region_on_camera_camera_caught_react(self, transitioned_before):
		"""Implementation of __main_region_on_camera_camera_caught_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 5:
			if (self.camera_clean) and (self.element == "Nothing"):
				self.__exit_sequence_main_region_on_camera_camera_caught()
				self.raise_show_off()
				self.raise_alarm_off()
				self.__enter_sequence_main_region_on_camera_camera_runing_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after


	def __main_region_on_camera_camera_runing_react(self, transitioned_before):
		"""Implementation of __main_region_on_camera_camera_runing_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 5:
			if (self.camera_caught_event) and (self.element == "Car" and self.distance_from_car < 56 and self.speed > 100):
				self.__exit_sequence_main_region_on_camera_camera_runing()
				self.raise_alarm_on()
				self.raise_show_c()
				self.__enter_sequence_main_region_on_camera_camera_caught_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
			elif (self.camera_caught_event) and (self.element == "Pedestrian"):
				self.__exit_sequence_main_region_on_camera_camera_runing()
				self.raise_alarm_on()
				self.raise_show_p()
				self.__enter_sequence_main_region_on_camera_camera_caught_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
			elif (self.camera_caught_event) and (self.element == "SpeedSign" and (self.road_speed < self.speed)):
				self.__exit_sequence_main_region_on_camera_camera_runing()
				self.raise_alarm_on()
				self.__enter_sequence_main_region_on_camera_camera_caught_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
			elif (self.camera_caught_event) and (self.is_state_active(self.State.main_region_on_car_state_car_state_signal_lever_off) and self.element == "OutOfLane"):
				self.__exit_sequence_main_region_on_camera_camera_runing()
				self.raise_alarm_on()
				self.raise_show_d()
				self.__enter_sequence_main_region_on_camera_camera_caught_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
			elif (self.camera_caught_event) and (self.element == "BreakLight" and self.distance_from_car < 56):
				self.__exit_sequence_main_region_on_camera_camera_runing()
				self.raise_alarm_on()
				self.raise_show_n()
				self.__enter_sequence_main_region_on_camera_camera_caught_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after


	def __main_region_off_react(self, transitioned_before):
		"""Implementation of __main_region_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.starting_the_engine:
				self.__exit_sequence_main_region_off()
				self.__enter_sequence_main_region_on_default()
				self.__react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after


	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.starting_the_engine = False
		self.turning_off_the_engine = False
		self.toggle_audio = False
		self.stop_audio = False
		self.swipe_lever = False
		self.car_moved = False
		self.car_standing = False
		self.alarm_on = False
		self.alarm_off = False
		self.run_audio = False
		self.camera_caught_event = False
		self.camera_clean = False
		self.show_d = False
		self.show_p = False
		self.show_c = False
		self.show_n = False
		self.show_off = False


	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		transitioned = -1
		self.__state_conf_vector_position = 0
		state = self.__state_vector[0]
		if state == self.State.main_region_on_car_state_car_state_audio_stop:
			transitioned = self.__main_region_on_car_state_car_state_audio_stop_react(transitioned)
		elif state == self.State.main_region_on_car_state_car_state_audio_pause:
			transitioned = self.__main_region_on_car_state_car_state_audio_pause_react(transitioned)
		elif state == self.State.main_region_on_car_state_car_state_audio_on:
			transitioned = self.__main_region_on_car_state_car_state_audio_on_react(transitioned)
		elif state == self.State.main_region_off:
			transitioned = self.__main_region_off_react(transitioned)
		if self.__state_conf_vector_position < 1:
			state = self.__state_vector[1]
			if state == self.State.main_region_on_car_state_car_state_movment_car_is_standing:
				transitioned = self.__main_region_on_car_state_car_state_movment_car_is_standing_react(transitioned)
			elif state == self.State.main_region_on_car_state_car_state_movment_car_is_moving:
				transitioned = self.__main_region_on_car_state_car_state_movment_car_is_moving_react(transitioned)
		if self.__state_conf_vector_position < 2:
			state = self.__state_vector[2]
			if state == self.State.main_region_on_car_state_car_state_signal_lever_on:
				transitioned = self.__main_region_on_car_state_car_state_signal_lever_on_react(transitioned)
			elif state == self.State.main_region_on_car_state_car_state_signal_lever_off:
				transitioned = self.__main_region_on_car_state_car_state_signal_lever_off_react(transitioned)
		if self.__state_conf_vector_position < 3:
			state = self.__state_vector[3]
			if state == self.State.main_region_on_display_display_off:
				transitioned = self.__main_region_on_display_display_off_react(transitioned)
			elif state == self.State.main_region_on_display_deviation_from_lane:
				transitioned = self.__main_region_on_display_deviation_from_lane_react(transitioned)
			elif state == self.State.main_region_on_display_car_collision:
				transitioned = self.__main_region_on_display_car_collision_react(transitioned)
			elif state == self.State.main_region_on_display_not_kepping_distance:
				transitioned = self.__main_region_on_display_not_kepping_distance_react(transitioned)
			elif state == self.State.main_region_on_display_pedestian_collision:
				transitioned = self.__main_region_on_display_pedestian_collision_react(transitioned)
		if self.__state_conf_vector_position < 4:
			state = self.__state_vector[4]
			if state == self.State.main_region_on_alarm_sound_on:
				transitioned = self.__main_region_on_alarm_sound_on_react(transitioned)
			elif state == self.State.main_region_on_alarm_sound_off:
				transitioned = self.__main_region_on_alarm_sound_off_react(transitioned)
		if self.__state_conf_vector_position < 5:
			state = self.__state_vector[5]
			if state == self.State.main_region_on_camera_camera_caught:
				transitioned = self.__main_region_on_camera_camera_caught_react(transitioned)
			elif state == self.State.main_region_on_camera_camera_runing:
				transitioned = self.__main_region_on_camera_camera_runing_react(transitioned)


	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")

		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__micro_step()
			self.__clear_in_events()
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
			condition_0 = self.starting_the_engine or self.turning_off_the_engine or self.toggle_audio or self.stop_audio or self.swipe_lever or self.car_moved or self.car_standing or self.alarm_on or self.alarm_off or self.run_audio or self.camera_caught_event or self.camera_clean or self.show_d or self.show_p or self.show_c or self.show_n or self.show_off
		self.__is_executing = False


	def enter(self):
		"""Implementation of enter function.
		"""
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")

		if self.__is_executing:
			return
		self.__is_executing = True
		self.__enter_sequence_main_region_default()
		self.__is_executing = False
	
	
	def exit(self):
		"""Implementation of exit function.
		""""""Implementation of statechart alarm_statechart.
Generated by YAKINDU Statechart Tools code generator.
"""

import queue

class AlarmStatechart:
	"""Implementation of the state machine AlarmStatechart.
	"""

	class State:
		""" State Enum
		"""
		(
			main_region_on,
			main_region_on_car_state_car_state,
			main_region_on_car_state_car_state_audio_stop,
			main_region_on_car_state_car_state_audio_pause,
			main_region_on_car_state_car_state_audio_on,
			main_region_on_car_state_car_state_movment_car_is_standing,
			main_region_on_car_state_car_state_movment_car_is_moving,
			main_region_on_car_state_car_state_signal_lever_on,
			main_region_on_car_state_car_state_signal_lever_off,
			main_region_on_display_display_off,
			main_region_on_display_deviation_from_lane,
			main_region_on_display_car_collision,
			main_region_on_display_not_kepping_distance,
			main_region_on_display_pedestian_collision,
			main_region_on_alarm_sound_on,
			main_region_on_alarm_sound_off,
			main_region_on_camera_camera_caught,
			main_region_on_camera_camera_runing,
			main_region_off,
			null_state
		) = range(20)


	def __init__(self):
		""" Declares all necessary variables including list of states, histories etc.
		"""

		self.road_speed = None
		self.speed = None
		self.distance_from_car = None
		self.element = None
		self.car_standing = None
		self.signal_level_state = None
		self.system_state = None
		self.music_state = None
		self.starting_the_engine = None
		self.turning_off_the_engine = None
		self.toggle_audio = None
		self.stop_audio = None
		self.swipe_lever = None
		self.car_moved = None
		self.car_standing = None
		self.alarm_on = None
		self.alarm_off = None
		self.run_audio = None
		self.camera_caught_event = None
		self.camera_clean = None
		self.show_d = None
		self.show_p = None
		self.show_c = None
		self.show_n = None
		self.show_off = None
		self.operation_callback = None

		self.in_event_queue = queue.Queue()
		# enumeration of all states:
		self.__State = AlarmStatechart.State
		self.__state_conf_vector_changed = None
		self.__state_vector = [None] * 6
		for __state_index in range(6):
			self.__state_vector[__state_index] = self.State.null_state

		# initializations:
		self.road_speed = 0
		self.speed = 0
		self.distance_from_car = 56
		self.element = "Nothing"
		self.car_standing = ""
		self.signal_level_state = ""
		self.system_state = ""
		self.music_state = ""
		self.__is_executing = False
		self.__state_conf_vector_position = None

	def is_active(self):
		"""Checks if the state machine is active.
		"""
		return self.__state_vector[0] is not self.__State.null_state or self.__state_vector[1] is not self.__State.null_state or self.__state_vector[2] is not self.__State.null_state or self.__state_vector[3] is not self.__State.null_state or self.__state_vector[4] is not self.__State.null_state or self.__state_vector[5] is not self.__State.null_state

	def is_final(self):
		"""Checks if the statemachine is final.
		Always returns 'false' since this state machine can never become final.
		"""
		return False

	def is_state_active(self, state):
		"""Checks if the state is currently active.
		"""
		s = state
		if s == self.__State.main_region_on:
			return (self.__state_vector[0] >= self.__State.main_region_on)\
				and (self.__state_vector[0] <= self.__State.main_region_on_camera_camera_runing)
		if s == self.__State.main_region_on_car_state_car_state:
			return (self.__state_vector[0] >= self.__State.main_region_on_car_state_car_state)\
				and (self.__state_vector[0] <= self.__State.main_region_on_car_state_car_state_signal_lever_off)
		if s == self.__State.main_region_on_car_state_car_state_audio_stop:
			return self.__state_vector[0] == self.__State.main_region_on_car_state_car_state_audio_stop
		if s == self.__State.main_region_on_car_state_car_state_audio_pause:
			return self.__state_vector[0] == self.__State.main_region_on_car_state_car_state_audio_pause
		if s == self.__State.main_region_on_car_state_car_state_audio_on:
			return self.__state_vector[0] == self.__State.main_region_on_car_state_car_state_audio_on
		if s == self.__State.main_region_on_car_state_car_state_movment_car_is_standing:
			return self.__state_vector[1] == self.__State.main_region_on_car_state_car_state_movment_car_is_standing
		if s == self.__State.main_region_on_car_state_car_state_movment_car_is_moving:
			return self.__state_vector[1] == self.__State.main_region_on_car_state_car_state_movment_car_is_moving
		if s == self.__State.main_region_on_car_state_car_state_signal_lever_on:
			return self.__state_vector[2] == self.__State.main_region_on_car_state_car_state_signal_lever_on
		if s == self.__State.main_region_on_car_state_car_state_signal_lever_off:
			return self.__state_vector[2] == self.__State.main_region_on_car_state_car_state_signal_lever_off
		if s == self.__State.main_region_on_display_display_off:
			return self.__state_vector[3] == self.__State.main_region_on_display_display_off
		if s == self.__State.main_region_on_display_deviation_from_lane:
			return self.__state_vector[3] == self.__State.main_region_on_display_deviation_from_lane
		if s == self.__State.main_region_on_display_car_collision:
			return self.__state_vector[3] == self.__State.main_region_on_display_car_collision
		if s == self.__State.main_region_on_display_not_kepping_distance:
			return self.__state_vector[3] == self.__State.main_region_on_display_not_kepping_distance
		if s == self.__State.main_region_on_display_pedestian_collision:
			return self.__state_vector[3] == self.__State.main_region_on_display_pedestian_collision
		if s == self.__State.main_region_on_alarm_sound_on:
			return self.__state_vector[4] == self.__State.main_region_on_alarm_sound_on
		if s == self.__State.main_region_on_alarm_sound_off:
			return self.__state_vector[4] == self.__State.main_region_on_alarm_sound_off
		if s == self.__State.main_region_on_camera_camera_caught:
			return self.__state_vector[5] == self.__State.main_region_on_camera_camera_caught
		if s == self.__State.main_region_on_camera_camera_runing:
			return self.__state_vector[5] == self.__State.main_region_on_camera_camera_runing
		if s == self.__State.main_region_off:
			return self.__state_vector[0] == self.__State.main_region_off
		return False

	def __execute_queued_event(self, func):
		func()

	def __get_next_event(self):
		if not self.in_event_queue.empty():
			return self.in_event_queue.get()
		return None

	def raise_starting_the_engine(self):
		"""Raise method for event starting_the_engine.
		"""
		self.in_event_queue.put(self.__raise_starting_the_engine_call)
		self.run_cycle()

	def __raise_starting_the_engine_call(self):
		"""Raise callback for event starting_the_engine.
		"""
		self.starting_the_engine = True

	def raise_turning_off_the_engine(self):
		"""Raise method for event turning_off_the_engine.
		"""
		self.in_event_queue.put(self.__raise_turning_off_the_engine_call)
		self.run_cycle()

	def __raise_turning_off_the_engine_call(self):
		"""Raise callback for event turning_off_the_engine.
		"""
		self.turning_off_the_engine = True

	def raise_toggle_audio(self):
		"""Raise method for event toggle_audio.
		"""
		self.in_event_queue.put(self.__raise_toggle_audio_call)
		self.run_cycle()

	def __raise_toggle_audio_call(self):
		"""Raise callback for event toggle_audio.
		"""
		self.toggle_audio = True

	def raise_stop_audio(self):
		"""Raise method for event stop_audio.
		"""
		self.in_event_queue.put(self.__raise_stop_audio_call)
		self.run_cycle()

	def __raise_stop_audio_call(self):
		"""Raise callback for event stop_audio.
		"""
		self.stop_audio = True

	def raise_swipe_lever(self):
		"""Raise method for event swipe_lever.
		"""
		self.in_event_queue.put(self.__raise_swipe_lever_call)
		self.run_cycle()

	def __raise_swipe_lever_call(self):
		"""Raise callback for event swipe_lever.
		"""
		self.swipe_lever = True

	def raise_car_moved(self):
		"""Raise method for event car_moved.
		"""
		self.in_event_queue.put(self.__raise_car_moved_call)
		self.run_cycle()

	def __raise_car_moved_call(self):
		"""Raise callback for event car_moved.
		"""
		self.car_moved = True

	def raise_car_standing(self):
		"""Raise method for event car_standing.
		"""
		self.in_event_queue.put(self.__raise_car_standing_call)
		self.run_cycle()

	def __raise_car_standing_call(self):
		"""Raise callback for event car_standing.
		"""
		self.car_standing = True

	def raise_alarm_on(self):
		"""Raise method for event alarm_on.
		"""
		self.in_event_queue.put(self.__raise_alarm_on_call)
		self.run_cycle()

	def __raise_alarm_on_call(self):
		"""Raise callback for event alarm_on.
		"""
		self.alarm_on = True

	def raise_alarm_off(self):
		"""Raise method for event alarm_off.
		"""
		self.in_event_queue.put(self.__raise_alarm_off_call)
		self.run_cycle()

	def __raise_alarm_off_call(self):
		"""Raise callback for event alarm_off.
		"""
		self.alarm_off = True

	def raise_run_audio(self):
		"""Raise method for event run_audio.
		"""
		self.in_event_queue.put(self.__raise_run_audio_call)
		self.run_cycle()

	def __raise_run_audio_call(self):
		"""Raise callback for event run_audio.
		"""
		self.run_audio = True

	def raise_camera_caught_event(self):
		"""Raise method for event camera_caught_event.
		"""
		self.in_event_queue.put(self.__raise_camera_caught_event_call)
		self.run_cycle()

	def __raise_camera_caught_event_call(self):
		"""Raise callback for event camera_caught_event.
		"""
		self.camera_caught_event = True

	def raise_camera_clean(self):
		"""Raise method for event camera_clean.
		"""
		self.in_event_queue.put(self.__raise_camera_clean_call)
		self.run_cycle()

	def __raise_camera_clean_call(self):
		"""Raise callback for event camera_clean.
		"""
		self.camera_clean = True

	def raise_show_d(self):
		"""Raise method for event show_d.
		"""
		self.in_event_queue.put(self.__raise_show_d_call)
		self.run_cycle()

	def __raise_show_d_call(self):
		"""Raise callback for event show_d.
		"""
		self.show_d = True

	def raise_show_p(self):
		"""Raise method for event show_p.
		"""
		self.in_event_queue.put(self.__raise_show_p_call)
		self.run_cycle()

	def __raise_show_p_call(self):
		"""Raise callback for event show_p.
		"""
		self.show_p = True

	def raise_show_c(self):
		"""Raise method for event show_c.
		"""
		self.in_event_queue.put(self.__raise_show_c_call)
		self.run_cycle()

	def __raise_show_c_call(self):
		"""Raise callback for event show_c.
		"""
		self.show_c = True

	def raise_show_n(self):
		"""Raise method for event show_n.
		"""
		self.in_event_queue.put(self.__raise_show_n_call)
		self.run_cycle()

	def __raise_show_n_call(self):
		"""Raise callback for event show_n.
		"""
		self.show_n = True

	def raise_show_off(self):
		"""Raise method for event show_off.
		"""
		self.in_event_queue.put(self.__raise_show_off_call)
		self.run_cycle()

	def __raise_show_off_call(self):
		"""Raise callback for event show_off.
		"""
		self.show_off = True

	def __entry_action_main_region_on(self):
		"""Entry action for state 'On'..
		"""
		self.system_state = "On"

	def __entry_action_main_region_on_car_state_car_state_audio_pause(self):
		"""Entry action for state 'Pause'..
		"""
		self.music_state = "Paused"

	def __entry_action_main_region_on_car_state_car_state_audio_on(self):
		"""Entry action for state 'On'..
		"""
		self.music_state = "On"

	def __entry_action_main_region_on_car_state_car_state_movment_car_is_standing(self):
		"""Entry action for state 'CarIsStanding'..
		"""
		self.car_standing = "Standing"

	def __entry_action_main_region_on_car_state_car_state_movment_car_is_moving(self):
		"""Entry action for state 'carIsMoving'..
		"""
		self.car_standing = "Moving"

	def __entry_action_main_region_on_car_state_car_state_signal_lever_on(self):
		"""Entry action for state 'On'..
		"""
		self.signal_level_state = "On"

	def __entry_action_main_region_on_car_state_car_state_signal_lever_off(self):
		"""Entry action for state 'Off'..
		"""
		self.signal_level_state = "Off"

	def __entry_action_main_region_off(self):
		"""Entry action for state 'Off'..
		"""
		self.system_state = "Off"
		self.speed = 0
		self.music_state = "Off"

	def __enter_sequence_main_region_on_default(self):
		"""'default' enter sequence for state On.
		"""
		self.__entry_action_main_region_on()
		self.__enter_sequence_main_region_on_car_state_default()
		self.__enter_sequence_main_region_on_display_default()
		self.__enter_sequence_main_region_on_alarm_default()
		self.__enter_sequence_main_region_on_camera_default()

	def __enter_sequence_main_region_on_car_state_car_state_audio_stop_default(self):
		"""'default' enter sequence for state Stop.
		"""
		self.__state_vector[0] = self.State.main_region_on_car_state_car_state_audio_stop
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_audio_pause_default(self):
		"""'default' enter sequence for state Pause.
		"""
		self.__entry_action_main_region_on_car_state_car_state_audio_pause()
		self.__state_vector[0] = self.State.main_region_on_car_state_car_state_audio_pause
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_audio_on_default(self):
		"""'default' enter sequence for state On.
		"""
		self.__entry_action_main_region_on_car_state_car_state_audio_on()
		self.__state_vector[0] = self.State.main_region_on_car_state_car_state_audio_on
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_movment_car_is_standing_default(self):
		"""'default' enter sequence for state CarIsStanding.
		"""
		self.__entry_action_main_region_on_car_state_car_state_movment_car_is_standing()
		self.__state_vector[1] = self.State.main_region_on_car_state_car_state_movment_car_is_standing
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_movment_car_is_moving_default(self):
		"""'default' enter sequence for state carIsMoving.
		"""
		self.__entry_action_main_region_on_car_state_car_state_movment_car_is_moving()
		self.__state_vector[1] = self.State.main_region_on_car_state_car_state_movment_car_is_moving
		self.__state_conf_vector_position = 1
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_signal_lever_on_default(self):
		"""'default' enter sequence for state On.
		"""
		self.__entry_action_main_region_on_car_state_car_state_signal_lever_on()
		self.__state_vector[2] = self.State.main_region_on_car_state_car_state_signal_lever_on
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_car_state_car_state_signal_lever_off_default(self):
		"""'default' enter sequence for state Off.
		"""
		self.__entry_action_main_region_on_car_state_car_state_signal_lever_off()
		self.__state_vector[2] = self.State.main_region_on_car_state_car_state_signal_lever_off
		self.__state_conf_vector_position = 2
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_display_display_off_default(self):
		"""'default' enter sequence for state DisplayOff.
		"""
		self.__state_vector[3] = self.State.main_region_on_display_display_off
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_display_deviation_from_lane_default(self):
		"""'default' enter sequence for state DeviationFromLane.
		"""
		self.__state_vector[3] = self.State.main_region_on_display_deviation_from_lane
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_display_car_collision_default(self):
		"""'default' enter sequence for state CarCollision.
		"""
		self.__state_vector[3] = self.State.main_region_on_display_car_collision
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_display_not_kepping_distance_default(self):
		"""'default' enter sequence for state NotKeppingDistance.
		"""
		self.__state_vector[3] = self.State.main_region_on_display_not_kepping_distance
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_display_pedestian_collision_default(self):
		"""'default' enter sequence for state PedestianCollision.
		"""
		self.__state_vector[3] = self.State.main_region_on_display_pedestian_collision
		self.__state_conf_vector_position = 3
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_alarm_sound_on_default(self):
		"""'default' enter sequence for state SoundOn.
		"""
		self.__state_vector[4] = self.State.main_region_on_alarm_sound_on
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_alarm_sound_off_default(self):
		"""'default' enter sequence for state SoundOff.
		"""
		self.__state_vector[4] = self.State.main_region_on_alarm_sound_off
		self.__state_conf_vector_position = 4
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_camera_camera_caught_default(self):
		"""'default' enter sequence for state CameraCaught.
		"""
		self.__state_vector[5] = self.State.main_region_on_camera_camera_caught
		self.__state_conf_vector_position = 5
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_on_camera_camera_runing_default(self):
		"""'default' enter sequence for state CameraRuning.
		"""
		self.__state_vector[5] = self.State.main_region_on_camera_camera_runing
		self.__state_conf_vector_position = 5
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_off_default(self):
		"""'default' enter sequence for state Off.
		"""
		self.__entry_action_main_region_off()
		self.__state_vector[0] = self.State.main_region_off
		self.__state_conf_vector_position = 0
		self.__state_conf_vector_changed = True

	def __enter_sequence_main_region_default(self):
		"""'default' enter sequence for region main_region.
		"""
		self.__react_main_region__entry_default()

	def __enter_sequence_main_region_on_car_state_default(self):
		"""'default' enter sequence for region carState.
		"""
		self.__react_main_region_on_car_state__entry_default()

	def __enter_sequence_main_region_on_car_state_car_state_audio_default(self):
		"""'default' enter sequence for region Audio.
		"""
		self.__react_main_region_on_car_state_car_state_audio__entry_default()

	def __enter_sequence_main_region_on_car_state_car_state_signal_lever_default(self):
		"""'default' enter sequence for region SignalLever.
		"""
		self.__react_main_region_on_car_state_car_state_signal_lever__entry_default()

	def __enter_sequence_main_region_on_display_default(self):
		"""'default' enter sequence for region Display.
		"""
		self.__react_main_region_on_display__entry_default()

	def __enter_sequence_main_region_on_alarm_default(self):
		"""'default' enter sequence for region Alarm.
		"""
		self.__react_main_region_on_alarm__entry_default()

	def __enter_sequence_main_region_on_camera_default(self):
		"""'default' enter sequence for region camera.
		"""
		self.__react_main_region_on_camera__entry_default()

	def __exit_sequence_main_region_on(self):
		"""Default exit sequence for state On.
		"""
		self.__exit_sequence_main_region_on_car_state()
		self.__exit_sequence_main_region_on_display()
		self.__exit_sequence_main_region_on_alarm()
		self.__exit_sequence_main_region_on_camera()

	def __exit_sequence_main_region_on_car_state_car_state_audio_stop(self):
		"""Default exit sequence for state Stop.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0

	def __exit_sequence_main_region_on_car_state_car_state_audio_pause(self):
		"""Default exit sequence for state Pause.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0

	def __exit_sequence_main_region_on_car_state_car_state_audio_on(self):
		"""Default exit sequence for state On.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0

	def __exit_sequence_main_region_on_car_state_car_state_movment_car_is_standing(self):
		"""Default exit sequence for state CarIsStanding.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1

	def __exit_sequence_main_region_on_car_state_car_state_movment_car_is_moving(self):
		"""Default exit sequence for state carIsMoving.
		"""
		self.__state_vector[1] = self.State.null_state
		self.__state_conf_vector_position = 1

	def __exit_sequence_main_region_on_car_state_car_state_signal_lever_on(self):
		"""Default exit sequence for state On.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2

	def __exit_sequence_main_region_on_car_state_car_state_signal_lever_off(self):
		"""Default exit sequence for state Off.
		"""
		self.__state_vector[2] = self.State.null_state
		self.__state_conf_vector_position = 2

	def __exit_sequence_main_region_on_display_display_off(self):
		"""Default exit sequence for state DisplayOff.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3

	def __exit_sequence_main_region_on_display_deviation_from_lane(self):
		"""Default exit sequence for state DeviationFromLane.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3

	def __exit_sequence_main_region_on_display_car_collision(self):
		"""Default exit sequence for state CarCollision.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3

	def __exit_sequence_main_region_on_display_not_kepping_distance(self):
		"""Default exit sequence for state NotKeppingDistance.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3

	def __exit_sequence_main_region_on_display_pedestian_collision(self):
		"""Default exit sequence for state PedestianCollision.
		"""
		self.__state_vector[3] = self.State.null_state
		self.__state_conf_vector_position = 3

	def __exit_sequence_main_region_on_alarm_sound_on(self):
		"""Default exit sequence for state SoundOn.
		"""
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4

	def __exit_sequence_main_region_on_alarm_sound_off(self):
		"""Default exit sequence for state SoundOff.
		"""
		self.__state_vector[4] = self.State.null_state
		self.__state_conf_vector_position = 4

	def __exit_sequence_main_region_on_camera_camera_caught(self):
		"""Default exit sequence for state CameraCaught.
		"""
		self.__state_vector[5] = self.State.null_state
		self.__state_conf_vector_position = 5

	def __exit_sequence_main_region_on_camera_camera_runing(self):
		"""Default exit sequence for state CameraRuning.
		"""
		self.__state_vector[5] = self.State.null_state
		self.__state_conf_vector_position = 5

	def __exit_sequence_main_region_off(self):
		"""Default exit sequence for state Off.
		"""
		self.__state_vector[0] = self.State.null_state
		self.__state_conf_vector_position = 0

	def __exit_sequence_main_region(self):
		"""Default exit sequence for region main_region.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_on_car_state_car_state_audio_stop:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_stop()
		elif state == self.State.main_region_on_car_state_car_state_audio_pause:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_pause()
		elif state == self.State.main_region_on_car_state_car_state_audio_on:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_on()
		elif state == self.State.main_region_off:
			self.__exit_sequence_main_region_off()
		state = self.__state_vector[1]
		if state == self.State.main_region_on_car_state_car_state_movment_car_is_standing:
			self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_standing()
		elif state == self.State.main_region_on_car_state_car_state_movment_car_is_moving:
			self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_moving()
		state = self.__state_vector[2]
		if state == self.State.main_region_on_car_state_car_state_signal_lever_on:
			self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_on()
		elif state == self.State.main_region_on_car_state_car_state_signal_lever_off:
			self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_off()
		state = self.__state_vector[3]
		if state == self.State.main_region_on_display_display_off:
			self.__exit_sequence_main_region_on_display_display_off()
		elif state == self.State.main_region_on_display_deviation_from_lane:
			self.__exit_sequence_main_region_on_display_deviation_from_lane()
		elif state == self.State.main_region_on_display_car_collision:
			self.__exit_sequence_main_region_on_display_car_collision()
		elif state == self.State.main_region_on_display_not_kepping_distance:
			self.__exit_sequence_main_region_on_display_not_kepping_distance()
		elif state == self.State.main_region_on_display_pedestian_collision:
			self.__exit_sequence_main_region_on_display_pedestian_collision()
		state = self.__state_vector[4]
		if state == self.State.main_region_on_alarm_sound_on:
			self.__exit_sequence_main_region_on_alarm_sound_on()
		elif state == self.State.main_region_on_alarm_sound_off:
			self.__exit_sequence_main_region_on_alarm_sound_off()
		state = self.__state_vector[5]
		if state == self.State.main_region_on_camera_camera_caught:
			self.__exit_sequence_main_region_on_camera_camera_caught()
		elif state == self.State.main_region_on_camera_camera_runing:
			self.__exit_sequence_main_region_on_camera_camera_runing()

	def __exit_sequence_main_region_on_car_state(self):
		"""Default exit sequence for region carState.
		"""
		state = self.__state_vector[0]
		if state == self.State.main_region_on_car_state_car_state_audio_stop:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_stop()
		elif state == self.State.main_region_on_car_state_car_state_audio_pause:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_pause()
		elif state == self.State.main_region_on_car_state_car_state_audio_on:
			self.__exit_sequence_main_region_on_car_state_car_state_audio_on()
		state = self.__state_vector[1]
		if state == self.State.main_region_on_car_state_car_state_movment_car_is_standing:
			self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_standing()
		elif state == self.State.main_region_on_car_state_car_state_movment_car_is_moving:
			self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_moving()
		state = self.__state_vector[2]
		if state == self.State.main_region_on_car_state_car_state_signal_lever_on:
			self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_on()
		elif state == self.State.main_region_on_car_state_car_state_signal_lever_off:
			self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_off()

	def __exit_sequence_main_region_on_display(self):
		"""Default exit sequence for region Display.
		"""
		state = self.__state_vector[3]
		if state == self.State.main_region_on_display_display_off:
			self.__exit_sequence_main_region_on_display_display_off()
		elif state == self.State.main_region_on_display_deviation_from_lane:
			self.__exit_sequence_main_region_on_display_deviation_from_lane()
		elif state == self.State.main_region_on_display_car_collision:
			self.__exit_sequence_main_region_on_display_car_collision()
		elif state == self.State.main_region_on_display_not_kepping_distance:
			self.__exit_sequence_main_region_on_display_not_kepping_distance()
		elif state == self.State.main_region_on_display_pedestian_collision:
			self.__exit_sequence_main_region_on_display_pedestian_collision()

	def __exit_sequence_main_region_on_alarm(self):
		"""Default exit sequence for region Alarm.
		"""
		state = self.__state_vector[4]
		if state == self.State.main_region_on_alarm_sound_on:
			self.__exit_sequence_main_region_on_alarm_sound_on()
		elif state == self.State.main_region_on_alarm_sound_off:
			self.__exit_sequence_main_region_on_alarm_sound_off()

	def __exit_sequence_main_region_on_camera(self):
		"""Default exit sequence for region camera.
		"""
		state = self.__state_vector[5]
		if state == self.State.main_region_on_camera_camera_caught:
			self.__exit_sequence_main_region_on_camera_camera_caught()
		elif state == self.State.main_region_on_camera_camera_runing:
			self.__exit_sequence_main_region_on_camera_camera_runing()

	def __react_main_region_on_car_state_car_state_audio__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_car_state_car_state_audio_on_default()

	def __react_main_region_on_car_state_car_state_signal_lever__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_car_state_car_state_signal_lever_off_default()

	def __react_main_region_on_car_state__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_car_state_car_state_audio_default()
		self.__enter_sequence_main_region_on_car_state_car_state_movment_car_is_standing_default()
		self.__enter_sequence_main_region_on_car_state_car_state_signal_lever_default()

	def __react_main_region_on_display__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_display_display_off_default()

	def __react_main_region_on_alarm__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_alarm_sound_off_default()

	def __react_main_region_on_camera__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_on_camera_camera_runing_default()

	def __react_main_region__entry_default(self):
		"""Default react sequence for initial entry .
		"""
		self.__enter_sequence_main_region_off_default()

	def __react(self, transitioned_before):
		"""Implementation of __react function.
		"""
		self.operation_callback.synchronize()
		return transitioned_before


	def __main_region_on_react(self, transitioned_before):
		"""Implementation of __main_region_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.turning_off_the_engine:
				self.__exit_sequence_main_region_on()
				self.__enter_sequence_main_region_off_default()
				self.__react(0)
				transitioned_after = 5
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after


	def __main_region_on_car_state_car_state_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_react function.
		"""
		transitioned_after = transitioned_before
		return transitioned_after


	def __main_region_on_car_state_car_state_audio_stop_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_audio_stop_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if (self.run_audio) and (self.is_state_active(self.State.main_region_on_camera_camera_runing)):
				self.__exit_sequence_main_region_on_car_state_car_state_audio_stop()
				self.__enter_sequence_main_region_on_car_state_car_state_audio_on_default()
				transitioned_after = 0
		return transitioned_after


	def __main_region_on_car_state_car_state_audio_pause_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_audio_pause_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.toggle_audio:
				self.__exit_sequence_main_region_on_car_state_car_state_audio_pause()
				self.__enter_sequence_main_region_on_car_state_car_state_audio_on_default()
				transitioned_after = 0
		return transitioned_after


	def __main_region_on_car_state_car_state_audio_on_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_audio_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.toggle_audio:
				self.__exit_sequence_main_region_on_car_state_car_state_audio_on()
				self.__enter_sequence_main_region_on_car_state_car_state_audio_pause_default()
				transitioned_after = 0
			elif (self.stop_audio) and (self.is_state_active(self.State.main_region_on_alarm_sound_on)):
				self.__exit_sequence_main_region_on_car_state_car_state_audio_on()
				self.__enter_sequence_main_region_on_car_state_car_state_audio_stop_default()
				transitioned_after = 0
		return transitioned_after


	def __main_region_on_car_state_car_state_movment_car_is_standing_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_movment_car_is_standing_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if (self.car_moved) and (self.speed > 0):
				self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_standing()
				self.__enter_sequence_main_region_on_car_state_car_state_movment_car_is_moving_default()
				transitioned_after = 1
		return transitioned_after


	def __main_region_on_car_state_car_state_movment_car_is_moving_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_movment_car_is_moving_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 1:
			if (self.car_standing) and (self.speed == 0):
				self.__exit_sequence_main_region_on_car_state_car_state_movment_car_is_moving()
				self.__enter_sequence_main_region_on_car_state_car_state_movment_car_is_standing_default()
				transitioned_after = 1
		return transitioned_after


	def __main_region_on_car_state_car_state_signal_lever_on_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_signal_lever_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 2:
			if self.swipe_lever:
				self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_on()
				self.__enter_sequence_main_region_on_car_state_car_state_signal_lever_off_default()
				self.__main_region_on_car_state_car_state_react(0)
				transitioned_after = 2
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_car_state_car_state_react(transitioned_before)
		return transitioned_after


	def __main_region_on_car_state_car_state_signal_lever_off_react(self, transitioned_before):
		"""Implementation of __main_region_on_car_state_car_state_signal_lever_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 2:
			if self.swipe_lever:
				self.__exit_sequence_main_region_on_car_state_car_state_signal_lever_off()
				self.__enter_sequence_main_region_on_car_state_car_state_signal_lever_on_default()
				self.__main_region_on_car_state_car_state_react(0)
				transitioned_after = 2
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_car_state_car_state_react(transitioned_before)
		return transitioned_after


	def __main_region_on_display_display_off_react(self, transitioned_before):
		"""Implementation of __main_region_on_display_display_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if (self.show_d) and (self.is_state_active(self.State.main_region_on_camera_camera_caught)):
				self.__exit_sequence_main_region_on_display_display_off()
				self.__enter_sequence_main_region_on_display_deviation_from_lane_default()
				transitioned_after = 3
			elif (self.show_c) and (self.is_state_active(self.State.main_region_on_camera_camera_caught)):
				self.__exit_sequence_main_region_on_display_display_off()
				self.__enter_sequence_main_region_on_display_car_collision_default()
				transitioned_after = 3
			elif (self.show_n) and (self.is_state_active(self.State.main_region_on_camera_camera_caught)):
				self.__exit_sequence_main_region_on_display_display_off()
				self.__enter_sequence_main_region_on_display_not_kepping_distance_default()
				transitioned_after = 3
			elif (self.show_p) and (self.is_state_active(self.State.main_region_on_camera_camera_caught)):
				self.__exit_sequence_main_region_on_display_display_off()
				self.__enter_sequence_main_region_on_display_pedestian_collision_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_on_display_deviation_from_lane_react(self, transitioned_before):
		"""Implementation of __main_region_on_display_deviation_from_lane_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if (self.show_off) and (self.is_state_active(self.State.main_region_on_camera_camera_runing)):
				self.__exit_sequence_main_region_on_display_deviation_from_lane()
				self.__enter_sequence_main_region_on_display_display_off_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_on_display_car_collision_react(self, transitioned_before):
		"""Implementation of __main_region_on_display_car_collision_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if (self.show_off) and (self.is_state_active(self.State.main_region_on_camera_camera_runing)):
				self.__exit_sequence_main_region_on_display_car_collision()
				self.__enter_sequence_main_region_on_display_display_off_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_on_display_not_kepping_distance_react(self, transitioned_before):
		"""Implementation of __main_region_on_display_not_kepping_distance_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if (self.show_off) and (self.is_state_active(self.State.main_region_on_camera_camera_runing) or self.distance_from_car >= 56):
				self.__exit_sequence_main_region_on_display_not_kepping_distance()
				self.__enter_sequence_main_region_on_display_display_off_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_on_display_pedestian_collision_react(self, transitioned_before):
		"""Implementation of __main_region_on_display_pedestian_collision_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 3:
			if (self.show_off) and (self.is_state_active(self.State.main_region_on_camera_camera_runing)):
				self.__exit_sequence_main_region_on_display_pedestian_collision()
				self.__enter_sequence_main_region_on_display_display_off_default()
				transitioned_after = 3
		return transitioned_after


	def __main_region_on_alarm_sound_on_react(self, transitioned_before):
		"""Implementation of __main_region_on_alarm_sound_on_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 4:
			if (self.alarm_off) and (self.is_state_active(self.State.main_region_on_camera_camera_runing)):
				self.__exit_sequence_main_region_on_alarm_sound_on()
				self.__enter_sequence_main_region_on_alarm_sound_off_default()
				transitioned_after = 4
		return transitioned_after


	def __main_region_on_alarm_sound_off_react(self, transitioned_before):
		"""Implementation of __main_region_on_alarm_sound_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 4:
			if self.alarm_on:
				self.__exit_sequence_main_region_on_alarm_sound_off()
				self.__enter_sequence_main_region_on_alarm_sound_on_default()
				transitioned_after = 4
		return transitioned_after


	def __main_region_on_camera_camera_caught_react(self, transitioned_before):
		"""Implementation of __main_region_on_camera_camera_caught_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 5:
			if (self.camera_clean) and (self.element == "Nothing"):
				self.__exit_sequence_main_region_on_camera_camera_caught()
				self.raise_show_off()
				self.raise_alarm_off()
				self.__enter_sequence_main_region_on_camera_camera_runing_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after


	def __main_region_on_camera_camera_runing_react(self, transitioned_before):
		"""Implementation of __main_region_on_camera_camera_runing_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 5:
			if (self.camera_caught_event) and (self.element == "Car" and self.distance_from_car < 56 and self.speed > 100):
				self.__exit_sequence_main_region_on_camera_camera_runing()
				self.raise_alarm_on()
				self.raise_show_c()
				self.__enter_sequence_main_region_on_camera_camera_caught_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
			elif (self.camera_caught_event) and (self.element == "Pedestrian"):
				self.__exit_sequence_main_region_on_camera_camera_runing()
				self.raise_alarm_on()
				self.raise_show_p()
				self.__enter_sequence_main_region_on_camera_camera_caught_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
			elif (self.camera_caught_event) and (self.element == "SpeedSign" and (self.road_speed < self.speed)):
				self.__exit_sequence_main_region_on_camera_camera_runing()
				self.raise_alarm_on()
				self.__enter_sequence_main_region_on_camera_camera_caught_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
			elif (self.camera_caught_event) and (self.is_state_active(self.State.main_region_on_car_state_car_state_signal_lever_off) and self.element == "OutOfLane"):
				self.__exit_sequence_main_region_on_camera_camera_runing()
				self.raise_alarm_on()
				self.raise_show_d()
				self.__enter_sequence_main_region_on_camera_camera_caught_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
			elif (self.camera_caught_event) and (self.element == "BreakLight" and self.distance_from_car < 56):
				self.__exit_sequence_main_region_on_camera_camera_runing()
				self.raise_alarm_on()
				self.raise_show_n()
				self.__enter_sequence_main_region_on_camera_camera_caught_default()
				self.__main_region_on_react(0)
				transitioned_after = 5
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__main_region_on_react(transitioned_before)
		return transitioned_after


	def __main_region_off_react(self, transitioned_before):
		"""Implementation of __main_region_off_react function.
		"""
		transitioned_after = transitioned_before
		if transitioned_after < 0:
			if self.starting_the_engine:
				self.__exit_sequence_main_region_off()
				self.__enter_sequence_main_region_on_default()
				self.__react(0)
				transitioned_after = 0
		#If no transition was taken then execute local reactions
		if transitioned_after == transitioned_before:
			transitioned_after = self.__react(transitioned_before)
		return transitioned_after


	def __clear_in_events(self):
		"""Implementation of __clear_in_events function.
		"""
		self.starting_the_engine = False
		self.turning_off_the_engine = False
		self.toggle_audio = False
		self.stop_audio = False
		self.swipe_lever = False
		self.car_moved = False
		self.car_standing = False
		self.alarm_on = False
		self.alarm_off = False
		self.run_audio = False
		self.camera_caught_event = False
		self.camera_clean = False
		self.show_d = False
		self.show_p = False
		self.show_c = False
		self.show_n = False
		self.show_off = False


	def __micro_step(self):
		"""Implementation of __micro_step function.
		"""
		transitioned = -1
		self.__state_conf_vector_position = 0
		state = self.__state_vector[0]
		if state == self.State.main_region_on_car_state_car_state_audio_stop:
			transitioned = self.__main_region_on_car_state_car_state_audio_stop_react(transitioned)
		elif state == self.State.main_region_on_car_state_car_state_audio_pause:
			transitioned = self.__main_region_on_car_state_car_state_audio_pause_react(transitioned)
		elif state == self.State.main_region_on_car_state_car_state_audio_on:
			transitioned = self.__main_region_on_car_state_car_state_audio_on_react(transitioned)
		elif state == self.State.main_region_off:
			transitioned = self.__main_region_off_react(transitioned)
		if self.__state_conf_vector_position < 1:
			state = self.__state_vector[1]
			if state == self.State.main_region_on_car_state_car_state_movment_car_is_standing:
				transitioned = self.__main_region_on_car_state_car_state_movment_car_is_standing_react(transitioned)
			elif state == self.State.main_region_on_car_state_car_state_movment_car_is_moving:
				transitioned = self.__main_region_on_car_state_car_state_movment_car_is_moving_react(transitioned)
		if self.__state_conf_vector_position < 2:
			state = self.__state_vector[2]
			if state == self.State.main_region_on_car_state_car_state_signal_lever_on:
				transitioned = self.__main_region_on_car_state_car_state_signal_lever_on_react(transitioned)
			elif state == self.State.main_region_on_car_state_car_state_signal_lever_off:
				transitioned = self.__main_region_on_car_state_car_state_signal_lever_off_react(transitioned)
		if self.__state_conf_vector_position < 3:
			state = self.__state_vector[3]
			if state == self.State.main_region_on_display_display_off:
				transitioned = self.__main_region_on_display_display_off_react(transitioned)
			elif state == self.State.main_region_on_display_deviation_from_lane:
				transitioned = self.__main_region_on_display_deviation_from_lane_react(transitioned)
			elif state == self.State.main_region_on_display_car_collision:
				transitioned = self.__main_region_on_display_car_collision_react(transitioned)
			elif state == self.State.main_region_on_display_not_kepping_distance:
				transitioned = self.__main_region_on_display_not_kepping_distance_react(transitioned)
			elif state == self.State.main_region_on_display_pedestian_collision:
				transitioned = self.__main_region_on_display_pedestian_collision_react(transitioned)
		if self.__state_conf_vector_position < 4:
			state = self.__state_vector[4]
			if state == self.State.main_region_on_alarm_sound_on:
				transitioned = self.__main_region_on_alarm_sound_on_react(transitioned)
			elif state == self.State.main_region_on_alarm_sound_off:
				transitioned = self.__main_region_on_alarm_sound_off_react(transitioned)
		if self.__state_conf_vector_position < 5:
			state = self.__state_vector[5]
			if state == self.State.main_region_on_camera_camera_caught:
				transitioned = self.__main_region_on_camera_camera_caught_react(transitioned)
			elif state == self.State.main_region_on_camera_camera_runing:
				transitioned = self.__main_region_on_camera_camera_runing_react(transitioned)


	def run_cycle(self):
		"""Implementation of run_cycle function.
		"""
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")

		if self.__is_executing:
			return
		self.__is_executing = True
		next_event = self.__get_next_event()
		if next_event is not None:
			self.__execute_queued_event(next_event)
		condition_0 = True
		while condition_0:
			self.__micro_step()
			self.__clear_in_events()
			next_event = self.__get_next_event()
			if next_event is not None:
				self.__execute_queued_event(next_event)
			condition_0 = self.starting_the_engine or self.turning_off_the_engine or self.toggle_audio or self.stop_audio or self.swipe_lever or self.car_moved or self.car_standing or self.alarm_on or self.alarm_off or self.run_audio or self.camera_caught_event or self.camera_clean or self.show_d or self.show_p or self.show_c or self.show_n or self.show_off
		self.__is_executing = False


	def enter(self):
		"""Implementation of enter function.
		"""
		if self.operation_callback is None:
			raise ValueError("Operation callback must be set.")

		if self.__is_executing:
			return
		self.__is_executing = True
		self.__enter_sequence_main_region_default()
		self.__is_executing = False


	def exit(self):
		"""Implementation of exit function.
		"""
		if self.__is_executing:
			return
		self.__is_executing = True
		self.__exit_sequence_main_region()
		self.__is_executing = False




		if self.__is_executing:
			return
		self.__is_executing = True
		self.__exit_sequence_main_region()
		self.__is_executing = False
	
	
	
